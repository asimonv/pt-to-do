{"version":3,"sources":["components/Task.js","components/ToDoList.js","data/tasks.js","components/Links.js","data/links.js","components/Why.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","Button","props","completed","TaskInput","input","Task","task","onClick","handleTextChange","onClickDelete","value","title","type","onChange","e","target","ToDoList","tasks","React","useState","todoTasks","setTodoTasks","_handleOnClick","taskIndex","findIndex","x","id","newArray","Array","from","_handleTextChange","text","newTask","_onClickDelete","filter","map","key","editing","length","JSON","stringify","ul","Link","li","Links","links","url","href","Why","Wrapper","App","role","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"i/BAGA,IAAMA,EAAYC,IAAOC,IAAV,KAQTC,EAASF,IAAOC,IAAV,KAWU,SAAAE,GAAK,OAAKA,EAAMC,UAAY,UAAY,WAGxDC,EAAYL,IAAOM,MAAV,KASM,SAAAH,GAAK,OAAKA,EAAMC,UAAY,eAAiB,UA2BnDG,EAxBF,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,KAAMC,EAA+C,EAA/CA,QAASC,EAAsC,EAAtCA,iBAAkBC,EAAoB,EAApBA,cAQ/C,OACE,kBAACZ,EAAD,KACE,kBAACG,EAAD,CAAQE,UAAWI,EAAKJ,UAAWK,QAAS,kBAAMA,EAAQD,KACvDA,EAAKJ,UAAY,eAAO,IAE3B,kBAACC,EAAD,CACED,UAAWI,EAAKJ,UAChBQ,MAAOJ,EAAKK,MACZC,KAAK,OACLC,SAhBgB,SAAAC,GAAM,IAEdJ,EACRI,EADFC,OAAUL,MAEZF,EAAiBF,EAAMI,MAcrB,4BAAQH,QAAS,kBAAME,EAAcH,KAArC,Y,oICpDN,IAAMT,EAAYC,IAAOC,IAAV,KAqDAiB,EA/CE,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EACIC,IAAMC,SAASF,GADnB,mBACvBG,EADuB,KACZC,EADY,KAExBC,EAAiB,SAAAhB,GACrB,IAAMiB,EAAYH,EAAUI,WAAU,SAAAC,GAAC,OAAIA,EAAEC,KAAOpB,EAAKoB,MACnDC,EAAWC,MAAMC,KAAKT,GAC5BO,EAASJ,GAAT,eACKH,EAAUG,GADf,CAEErB,WAAYyB,EAASJ,GAAWrB,YAElCmB,EAAaM,IAQTG,EAAoB,SAACxB,EAAMyB,GAC/B,IAAMC,EAAO,eAAQ1B,EAAR,CAAcK,MAAOoB,IAC5BR,EAAYH,EAAUI,WAAU,SAAAC,GAAC,OAAIA,EAAEC,KAAOpB,EAAKoB,MACnDC,EAAWC,MAAMC,KAAKT,GAC5BO,EAASJ,GAAaS,EACtBX,EAAaM,IAGTM,EAAiB,SAAA3B,GACrB,IAAMqB,EAAWP,EAAUc,QAAO,SAAAT,GAAC,OAAIA,EAAEC,KAAOpB,EAAKoB,MACrDL,EAAaM,IAGf,OACE,kBAAC,EAAD,KACGP,EAAUe,KAAI,SAAAV,GAAC,OACd,kBAAC,EAAD,CACEW,IAAKX,EAAEC,GACPnB,QAASe,EACThB,KAAMmB,EACNjB,iBAAkBsB,EAClBrB,cAAewB,OAGnB,4BAAQ1B,QA7BkB,WAC5B,IAAMyB,EAAU,CAAEK,SAAS,EAAMX,GAAIN,EAAUkB,QAC/CjB,EAAa,GAAD,mBAAKD,GAAL,CAAgBY,OA2B1B,OACA,6BAAMO,KAAKC,UAAUpB,EAAW,KAAM,MC/C7BH,EALD,CACZ,CAAES,GAAI,EAAGf,MAAO,eAChB,CAAEe,GAAI,EAAGf,MAAO,oB,mNCClB,IAAMd,EAAYC,IAAO2C,GAAV,KAKTC,EAAO5C,IAAO6C,GAAV,KAgBKC,EAZD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf,OACE,kBAAC,EAAD,KACGA,EAAMV,KAAI,SAAAV,GAAC,OACV,kBAACiB,EAAD,CAAMN,IAAKX,EAAEqB,KACX,uBAAGC,KAAMtB,EAAEqB,KAAMrB,EAAEd,aCgBdkC,EAjCD,CACZ,CACEC,IACE,kFACFnC,MAAO,UAET,CACEmC,IAAK,gDACLnC,MAAO,uBAET,CACEmC,IAAK,wCACLnC,MACE,6HAEJ,CACEmC,IAAK,+CACLnC,MAAO,oBAET,CACEmC,IAAK,qCACLnC,MAAO,qBAET,CACEmC,IAAK,0BACLnC,MAAO,WAET,CACEmC,IAAK,8CACLnC,MAAO,sBCKIqC,EAhCH,WACV,OACE,oCACE,oCACA,4BACE,iDACA,oEACA,yOAKA,mFACA,4CACA,mDACA,8CACA,wDAEF,oCACA,4BACE,uDACA,uEACA,4BACE,oCADF,UAGA,2FACA,2D,wOCnBR,IAAMnD,EAAYC,IAAOC,IAAV,KAITkD,EAAUnD,IAAOC,IAAV,KAgCEmD,MA1Bf,WACE,OACE,oCACE,kBAACD,EAAD,KACE,uBAAGF,KAAK,uCACN,0BAAMI,KAAK,MAAMC,aAAW,gCAA5B,4BADF,OAKE,0BAAMD,KAAK,MAAMC,aAAW,+BAA5B,6BAIF,gDACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUnC,MAAOA,KAEnB,qCACA,kBAAC,EAAD,CAAgB4B,MAAOA,IACvB,iDACA,kBAAC,EAAD,SC3BYQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8d665f7b.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  border: 3px solid orange;\n  padding: 10px;\n  margin: 10px 0px;\n  display: flex;\n  align-items: center;\n`;\n\nconst Button = styled.div`\n  border: 2px solid #00b894;\n  width: 20px;\n  height: 20px;\n  border-radius: 2px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  color: white;\n  text-align: center;\n  justify-content: center;\n  background-color: ${props => (props.completed ? \"#00b894\" : \"white\")};\n`;\n\nconst TaskInput = styled.input`\n  display: flex;\n  flex: 1;\n  height: 20px;\n  margin-left: 5px;\n  font-weight: 600;\n  font-size: inherit;\n  border: 0;\n  outline: none;\n  text-decoration: ${props => (props.completed ? \"line-through\" : \"none\")};\n`;\n\nconst Task = ({ task, onClick, handleTextChange, onClickDelete }) => {\n  const _handleChange = e => {\n    const {\n      target: { value }\n    } = e;\n    handleTextChange(task, value);\n  };\n\n  return (\n    <Container>\n      <Button completed={task.completed} onClick={() => onClick(task)}>\n        {task.completed ? \"☑️\" : \"\"}\n      </Button>\n      <TaskInput\n        completed={task.completed}\n        value={task.title}\n        type=\"text\"\n        onChange={_handleChange}\n      />\n      <button onClick={() => onClickDelete(task)}>delete</button>\n    </Container>\n  );\n};\n\nexport default Task;\n","import React from \"react\";\nimport Task from \"./Task\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  padding: 10px;\n  margin: 10px;\n  border: 3px solid red;\n`;\n\nconst ToDoList = ({ tasks }) => {\n  const [todoTasks, setTodoTasks] = React.useState(tasks);\n  const _handleOnClick = task => {\n    const taskIndex = todoTasks.findIndex(x => x.id === task.id);\n    const newArray = Array.from(todoTasks);\n    newArray[taskIndex] = {\n      ...todoTasks[taskIndex],\n      completed: !newArray[taskIndex].completed\n    };\n    setTodoTasks(newArray);\n  };\n\n  const _handleAddButtonClick = () => {\n    const newTask = { editing: true, id: todoTasks.length };\n    setTodoTasks([...todoTasks, newTask]);\n  };\n\n  const _handleTextChange = (task, text) => {\n    const newTask = { ...task, title: text };\n    const taskIndex = todoTasks.findIndex(x => x.id === task.id);\n    const newArray = Array.from(todoTasks);\n    newArray[taskIndex] = newTask;\n    setTodoTasks(newArray);\n  };\n\n  const _onClickDelete = task => {\n    const newArray = todoTasks.filter(x => x.id !== task.id);\n    setTodoTasks(newArray);\n  };\n\n  return (\n    <Container>\n      {todoTasks.map(x => (\n        <Task\n          key={x.id}\n          onClick={_handleOnClick}\n          task={x}\n          handleTextChange={_handleTextChange}\n          onClickDelete={_onClickDelete}\n        />\n      ))}\n      <button onClick={_handleAddButtonClick}>add</button>\n      <pre>{JSON.stringify(todoTasks, null, 2)}</pre>\n    </Container>\n  );\n};\n\nexport default ToDoList;\n","const tasks = [\n  { id: 0, title: \"llamar mama\" },\n  { id: 1, title: \"jugar ping pong\" }\n];\n\nexport default tasks;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.ul`\n  border: 3px solid purple;\n  padding: 10px;\n`;\n\nconst Link = styled.li`\n  margin-left: 20px;\n`;\n\nconst Links = ({ links }) => {\n  return (\n    <Container>\n      {links.map(x => (\n        <Link key={x.url}>\n          <a href={x.url}>{x.title}</a>\n        </Link>\n      ))}\n    </Container>\n  );\n};\n\nexport default Links;\n","const links = [\n  {\n    url:\n      \"https://trends.google.com/trends/explore?cat=31&date=all&q=Vue.js,React,Angular\",\n    title: \"Trends\"\n  },\n  {\n    url: \"https://reactjs.org/docs/getting-started.html\",\n    title: \"React documentation\"\n  },\n  {\n    url: \"https://reactjs.org/docs/context.html\",\n    title:\n      \"Context provides a way to pass data through the component tree without having to pass props down manually at every level.\"\n  },\n  {\n    url: \"https://github.com/facebook/create-react-app\",\n    title: \"create-react-app\"\n  },\n  {\n    url: \"https://www.styled-components.com/\",\n    title: \"styled components\"\n  },\n  {\n    url: \"https://webpack.js.org/\",\n    title: \"webpack\"\n  },\n  {\n    url: \"https://github.com/prettier/prettier-vscode\",\n    title: \"Prettier (vscode)\"\n  }\n];\n\nexport default links;\n","import React from \"react\";\n\nconst Why = () => {\n  return (\n    <>\n      <h3>Pros</h3>\n      <dl>\n        <dt>Fast: Virtual DOM</dt>\n        <dd>The entire virtual DOM gets updated.</dd>\n        <dd>\n          The virtual DOM gets compared to what it looked ddke before you\n          updated it. React figures out which objects have changed. The changed\n          objects, and the changed objects only, get updated on the real DOM.\n        </dd>\n        <dd>Changes on the real DOM cause the screen to change.</dd>\n        <dt>SEO friendly</dt>\n        <dt>Reusable components</dt>\n        <dt>Easy data flow</dt>\n        <dt>No compiling -> Webpack</dt>\n      </dl>\n      <h3>Cons</h3>\n      <dl>\n        <dt>No predefined structure</dt>\n        <dt>React internals -> weird error messages</dt>\n        <dt>\n          <i>Think</i> React\n        </dt>\n        <dt>Use of inline styling in JSX in conjunction with classNames</dt>\n        <dt>Complex state management</dt>\n      </dl>\n    </>\n  );\n};\n\nexport default Why;\n","import React from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport ToDoList from \"./components/ToDoList\";\nimport tasks from \"./data/tasks\";\nimport LinksComponent from \"./components/Links\";\nimport links from \"./data/links\";\nimport Why from \"./components/Why\";\n\nconst Container = styled.div`\n  border: 3px solid blue;\n`;\n\nconst Wrapper = styled.div`\n  margin: 10px;\n  border: 3px solid black;\n  padding: 10px;\n`;\n\nfunction App() {\n  return (\n    <>\n      <Wrapper>\n        <a href=\"https://github.com/asimonv/pt-to-do\">\n          <span role=\"img\" aria-label=\"2 hands pointing right emoji\">\n            👉👉\n          </span>\n          code\n          <span role=\"img\" aria-label=\"2 hands pointing left emoji\">\n            👈👈\n          </span>\n        </a>\n        <h2>Demo: To-do list</h2>\n        <Container>\n          <ToDoList tasks={tasks} />\n        </Container>\n        <h2>Links</h2>\n        <LinksComponent links={links} />\n        <h2>Por qué React?</h2>\n        <Why />\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}